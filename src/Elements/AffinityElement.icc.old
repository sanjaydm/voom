// -*- C++ -*-
//----------------------------------------------------------------------
//
//                             Mo Bai
//                University of California Los Angeles
//                   (C) 2009 All Rights Reserved
//
//----------------------------------------------------------------------


namespace voom
{
  //! Constructor
  AffinityElement::AffinityElement(const Shape_t & s, const NodeContainer & nodes ):_s(s)
  {
    // _s = s;
    //! initialize NodeContainer
    unsigned nNodes = nodes.size();
      
    _nodes = nodes;
    
    for(ConstNodeIterator n=_nodes.begin(); n!=_nodes.end(); n++) 
      _baseNodes.push_back(*n);
  } 

  //! Calculate strain tensor
  Tensor2D AffinityElement::Strain()
  {	
    Tensor2D dudx;
    
    // Compute spatial derivatives of shape functions from
    // parametric derivatives by transforming with matrix jacobian
    // of isoparametric mapping.
    
    // parametric derivatives from shape object
    const Shape_t::DerivativeContainer & dnds = _s.derivatives();

    // matrix duds;
    tvmet::Matrix<double,2,2> duds(0.0);
    for(int i=0; i<2; i++) {
      for(int alpha=0; alpha<2; alpha++) {   
	for(int a=0; a<_nodes.size(); a++) {
	  duds(i,alpha) += dnds[a](i)*(_nodes[a]->getPoint(alpha) - _nodes[a]->getPosition(alpha) );
	}
      }      
    }
   
    // matrix jacobian dxds;
    tvmet::Matrix<double,2,2> dxds(0.0);
    for(int i=0; i<2; i++) {
      for(int alpha=0; alpha<2; alpha++) {   
	for(int a=0; a<_nodes.size(); a++) {
	  dxds(i,alpha) += dnds[a](i)*(_nodes[a]->getPosition(alpha) );
	}
      }      
    }

    // compute scalar jacobian by calculating the determinant of dxds
    double J = dxds(0,0)*dxds(1,1) - dxds(0,1)*dxds(1,0);
    
    // invert matrix jacobian
    tvmet::Matrix<double,2,2> invJac(0.0);
    invJac(0,0) = dxds(1,1);
    invJac(0,1) = -dxds(0,1);
    invJac(1,0) = -dxds(1,0);
    invJac(1,1) = dxds(0,0);
    
    invJac /= J;
    
    //std::cout << "duds=" << std::endl << duds << std::endl;
    //std::cout << "dxds=" << std::endl << dxds << std::endl;

    dudx = duds * invJac;
    Tensor2D strain;
    strain = 0.5*(tvmet::trans(dudx) + dudx);
    return strain;    
  }

  void AffinityElement::compute(bool f0, bool f1, bool f2){;}

} // namespace voom
